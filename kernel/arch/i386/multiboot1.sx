#include <flags.h>
#ifndef USE_MULTIBOOT_2

#define ASM_FILE 1

#include <multiboot/multiboot.h>

#ifdef __ELF__
# define AOUT_KLUDGE 0
#else
# define AOUT_KLUDGE MULTIBOOT_AOUT_KLUDGE
#endif

#define THINGY (1 << 16)

.set MULTIBOOT_HEADER_FLAGS, (MULTIBOOT_PAGE_ALIGN | MULTIBOOT_MEMORY_INFO | MULTIBOOT_VIDEO_MODE | AOUT_KLUDGE)

.section .multiboot
.align 4

.set MULTIBOOT_HEADER_SIZE, (multiboot_header_end - multiboot_header_start)

multiboot_header_start:

//standard multiboot 1 header

.long MULTIBOOT_HEADER_MAGIC
.long MULTIBOOT_HEADER_FLAGS
.long -(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)

//Multiboot memory info
//TODO: understand what Serenity is doing here

.long 0x00000000
.long 0x00000000
.long 0x00000000
.long 0x00000000
.long 0x00000000

#Multiboot video mode info

#ifdef FRAMEBUFFER
//mode type
.long 0x00000000
.long 1280 //height
.long 1024 //width
.long 32 //depth
#endif

multiboot_header_end:
 

.section .bss
.align 16

stack_bottom:
.skip KERNEL_STACK_SIZE
.global stack_top
stack_top:

mboot_magic:
    .long 0
mboot_header:
    .long 0

#Allocate initial space for bootstrapping page tables/data structures

.section .bss, "aw", @nobits
    .align 4096
boot_page_directory:
    .skip 4096
boot_page_table1:
    .skip 4096
boot_page_table2:
    .skip 4096
boot_page_table3:
	.skip 4096
boot_page_table4:
	.skip 4096

.section .text
.global _start
.type _start @function
.extern higher

_start:
	#backup the multiboot information
	movl %eax, (mboot_magic - 0xC0000000)
	addl $0xC0000000, %ebx #adjust for the offset caused by our page tables.
	movl %ebx, (mboot_header - 0xC0000000)

	#setup our stack before we enable paging
    mov $(stack_top - 0xC0000000), %esp

	#push pointers to the page tables so our C code can populate them
    pushl $(boot_page_table4 - 0xC0000000)
	pushl $(boot_page_table3 - 0xC0000000)
	pushl $(boot_page_table2 - 0xC0000000)
    pushl $(boot_page_table1 - 0xC0000000)
    pushl $(boot_page_directory - 0xC0000000)

   	call higher
		
	#set the page table
	movl $(boot_page_directory - 0xC0000000), %ecx
	movl %ecx, %cr3

	# Enable paging and the write-protect bit.
	movl %cr0, %ecx
	orl $0x80010000, %ecx
	movl %ecx, %cr0

	# Jump to higher half with an absolute jump. 
	lea 4f, %ecx
	jmp *%ecx

    4:
	# At this point, paging is fully set up and enabled.

	# Unmap the identity mapping as it is now unnecessary. 
	movl $0, boot_page_directory + 0
	movl $0, boot_page_directory + 4
	
	# Reload crc3 to force a TLB flush so the changes to take effect.
	movl %cr3, %ecx
	movl %ecx, %cr3

	# Set up the stack.
	mov $stack_top, %esp

	# Enter the high-level kernel.
	movl mboot_magic, %eax
	movl mboot_header, %ebx
	
	pushl %ebx
	pushl %eax
	call kernel_init

	# Infinite loop if the system has nothing more to do.
	cli
1:	hlt
	jmp 1b
.size _start, . - _start

#endif

